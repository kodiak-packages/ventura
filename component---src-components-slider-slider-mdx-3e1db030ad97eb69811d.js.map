{"version":3,"sources":["webpack:///../src/components/Slider/Slider.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","__position","__code","__scope","Playground","Props","Slider","React","value","setValue","name","valueBoundaries","onChange","numberOfDecimals","stepSize","textBoundaries","showTooltip","isDisabled","of","isMDXComponent"],"mappings":"6gBAQO,IAAMA,EAAe,Q,kNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,cAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,UADR,UAGA,2GACA,iBAAQ,CACN,GAAM,YADR,YAGA,iBAAQ,CACN,GAAM,kBADR,kBAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,kNAAqNC,SAAO,GAC7PJ,QACAH,kBACAQ,eACAC,UACAC,YAL6P,gBAM7PV,IAN6P,EAO7PH,eAP6P,GAQ5PO,QAAQ,eACZ,WAAM,MACyBO,WAAe,IAAlCC,EADN,KACaC,EADb,KAED,OAAO,YAAC,IAAD,CAAQC,KAAK,iBAAiBC,gBAAiB,CAAC,EAAG,KAAMH,MAAOA,EAAOI,SAAUH,EAAUT,QAAQ,cAG9G,iBAAQ,CACN,GAAM,8BADR,8BAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,mQAAsQC,SAAO,GAC9SJ,QACAH,kBACAQ,eACAC,UACAC,YAL8S,gBAM9SV,IAN8S,EAO9SH,eAP8S,GAQ7SO,QAAQ,eACZ,WAAM,MACyBO,WAAe,GAAlCC,EADN,KACaC,EADb,KAED,OAAO,YAAC,IAAD,CAAQC,KAAK,iBAAiBC,gBAAiB,CAAC,EAAG,IAAKH,MAAOA,EAAOI,SAAUH,EAAUI,iBAAkB,EAAGC,SAAU,IAAMd,QAAQ,cAGlJ,iBAAQ,CACN,GAAM,+BADR,+BAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,+SAAoTC,SAAO,GAC5VJ,QACAH,kBACAQ,eACAC,UACAC,YAL4V,gBAM5VV,IAN4V,EAO5VH,eAP4V,GAQ3VO,QAAQ,eACZ,WAAM,MACyBO,WAAe,GAAlCC,EADN,KACaC,EADb,KAED,OAAO,YAAC,IAAD,CAAQC,KAAK,yBAAyBC,gBAAiB,CAAC,EAAG,IAAKI,eAAgB,CAAC,sBAAuB,iBAAkBP,MAAOA,EAAOM,SAAU,EAAGF,SAAUH,EAAUT,QAAQ,cAG5L,iBAAQ,CACN,GAAM,0BADR,0BAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,gPAAmPC,SAAO,GAC3RJ,QACAH,kBACAQ,eACAC,UACAC,YAL2R,gBAM3RV,IAN2R,EAO3RH,eAP2R,GAQ1RO,QAAQ,eACZ,WAAM,MACyBO,WAAe,IAAlCC,EADN,KACaC,EADb,KAED,OAAO,YAAC,IAAD,CAAQC,KAAK,oBAAoBC,gBAAiB,CAAC,EAAG,KAAMH,MAAOA,EAAOI,SAAUH,EAAUO,aAAa,EAAOhB,QAAQ,cAGrI,iBAAQ,CACN,GAAM,mBADR,mBAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,qOAAwOC,SAAO,GAChRJ,QACAH,kBACAQ,eACAC,UACAC,YALgR,gBAMhRV,IANgR,EAOhRH,eAPgR,GAQ/QO,QAAQ,eACZ,WAAM,MACyBO,WAAe,IAAlCC,EADN,KACaC,EADb,KAED,OAAO,YAAC,IAAD,CAAQC,KAAK,kBAAkBC,gBAAiB,CAAC,EAAG,KAAMH,MAAOA,EAAOI,SAAUH,EAAUQ,YAAU,EAACjB,QAAQ,cAG1H,iBAAQ,CACN,GAAM,OADR,OAGA,YAAC,IAAD,CAAOkB,GAAIZ,IAAQN,QAAQ,gB,gNAK/BH,EAAWsB,gBAAiB","file":"component---src-components-slider-slider-mdx-3e1db030ad97eb69811d.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/ventura/ventura/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { Slider } from '../../index.ts';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"slider\"\n    }}>{`Slider`}</h1>\n    <p>{`A slider component lets the user pick a value between a minimum and maximum value.`}</p>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <h3 {...{\n      \"id\": \"minimal-slider\"\n    }}>{`Minimal slider`}</h3>\n    <Playground __position={0} __code={'() => {\\n  const [value, setValue] = React.useState(50)\\n  return (\\n    <Slider\\n      name=\\\"minimal-slider\\\"\\n      valueBoundaries={[0, 100]}\\n      value={value}\\n      onChange={setValue}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Slider,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [value, setValue] = React.useState(50);\n        return <Slider name='minimal-slider' valueBoundaries={[0, 100]} value={value} onChange={setValue} mdxType=\"Slider\" />;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"slider-with-decimal-values\"\n    }}>{`Slider with decimal values`}</h3>\n    <Playground __position={1} __code={'() => {\\n  const [value, setValue] = React.useState(1)\\n  return (\\n    <Slider\\n      name=\\\"decimal-slider\\\"\\n      valueBoundaries={[0, 10]}\\n      value={value}\\n      onChange={setValue}\\n      numberOfDecimals={2}\\n      stepSize={0.05}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Slider,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [value, setValue] = React.useState(1);\n        return <Slider name='decimal-slider' valueBoundaries={[0, 10]} value={value} onChange={setValue} numberOfDecimals={2} stepSize={0.05} mdxType=\"Slider\" />;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"slider-with-text-boundaries\"\n    }}>{`Slider with text boundaries`}</h3>\n    <Playground __position={2} __code={'() => {\\n  const [value, setValue] = React.useState(5)\\n  return (\\n    <Slider\\n      name=\\\"text-boundaries-slider\\\"\\n      valueBoundaries={[0, 10]}\\n      textBoundaries={[\\'Not accurate at all\\', \\'Very accurate\\']}\\n      value={value}\\n      stepSize={1}\\n      onChange={setValue}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Slider,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [value, setValue] = React.useState(5);\n        return <Slider name='text-boundaries-slider' valueBoundaries={[0, 10]} textBoundaries={['Not accurate at all', 'Very accurate']} value={value} stepSize={1} onChange={setValue} mdxType=\"Slider\" />;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"slider-without-tooltip\"\n    }}>{`Slider without tooltip`}</h3>\n    <Playground __position={3} __code={'() => {\\n  const [value, setValue] = React.useState(50)\\n  return (\\n    <Slider\\n      name=\\\"no-tooltip-slider\\\"\\n      valueBoundaries={[0, 100]}\\n      value={value}\\n      onChange={setValue}\\n      showTooltip={false}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Slider,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [value, setValue] = React.useState(50);\n        return <Slider name='no-tooltip-slider' valueBoundaries={[0, 100]} value={value} onChange={setValue} showTooltip={false} mdxType=\"Slider\" />;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"disabled-slider\"\n    }}>{`Disabled slider`}</h3>\n    <Playground __position={4} __code={'() => {\\n  const [value, setValue] = React.useState(50)\\n  return (\\n    <Slider\\n      name=\\\"disabled-slider\\\"\\n      valueBoundaries={[0, 100]}\\n      value={value}\\n      onChange={setValue}\\n      isDisabled\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Slider,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [value, setValue] = React.useState(50);\n        return <Slider name='disabled-slider' valueBoundaries={[0, 100]} value={value} onChange={setValue} isDisabled mdxType=\"Slider\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <Props of={Slider} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}