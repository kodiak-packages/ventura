{"version":3,"sources":["webpack:///../src/components/Checkbox/Checkbox.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","Checkbox","Button","label","name","defaultValue","description","isDisabled","onChange","event","console","log","target","checked","React","isChecked","setIsChecked","style","display","alignItems","gap","onClick","value","of","isMDXComponent"],"mappings":"4gBASO,IAAMA,EAAe,Q,sNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,gBAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,YADR,YAGA,sFACA,iBAAQ,CACN,GAAM,kBADR,kBAGA,sBACE,kBAAIC,WAAW,MAAf,qCAA0D,mBAAGA,WAAW,MAAS,CAC7E,KAAQ,wBAD8C,aAA1D,mEAIF,iBAAQ,CACN,GAAM,YADR,YAGA,iBAAQ,CACN,GAAM,eADR,eAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,gDAAqDC,SAAO,GAC7FL,QACAH,kBACAS,eACAC,UACAC,aACAC,YAN6F,gBAO7FZ,IAP6F,EAQ7FH,eAR6F,GAS5FO,QAAQ,cACb,YAAC,IAAD,CAAUS,MAAM,YAAYC,KAAK,UAAUV,QAAQ,cAEjD,iBAAQ,CACN,GAAM,iBADR,iBAGA,YAAC,IAAD,CAAYE,WAAY,EAAGC,OAAQ,uEAA4EC,SAAO,GACpHL,QACAH,kBACAS,eACAC,UACAC,aACAC,YANoH,gBAOpHZ,IAPoH,EAQpHH,eARoH,GASnHO,QAAQ,cACb,YAAC,IAAD,CAAUS,MAAM,aAAaC,KAAK,YAAYC,cAAc,EAAMX,QAAQ,cAExE,iBAAQ,CACN,GAAM,6BADR,6BAGA,YAAC,IAAD,CAAYE,WAAY,EAAGC,OAAQ,sGAA6GC,SAAO,GACrJL,QACAH,kBACAS,eACAC,UACAC,aACAC,YANqJ,gBAOrJZ,IAPqJ,EAQrJH,eARqJ,GASpJO,QAAQ,cACb,YAAC,IAAD,CAAUS,MAAM,YAAYC,KAAK,YAAYE,YAAY,8BAA8BZ,QAAQ,cAE7F,iBAAQ,CACN,GAAM,qBADR,qBAGA,YAAC,IAAD,CAAYE,WAAY,EAAGC,OAAQ,wEAA6EC,SAAO,GACrHL,QACAH,kBACAS,eACAC,UACAC,aACAC,YANqH,gBAOrHZ,IAPqH,EAQrHH,eARqH,GASpHO,QAAQ,cACb,YAAC,IAAD,CAAUS,MAAM,sBAAsBC,KAAK,YAAYG,YAAU,EAACb,QAAQ,cAExE,iBAAQ,CACN,GAAM,yBADR,yBAGA,YAAC,IAAD,CAAYE,WAAY,EAAGC,OAAQ,yHAA8HC,SAAO,GACtKL,QACAH,kBACAS,eACAC,UACAC,aACAC,YANsK,gBAOtKZ,IAPsK,EAQtKH,eARsK,GASrKO,QAAQ,cACb,YAAC,IAAD,CAAUS,MAAM,MAAMC,KAAK,YAAYI,SAAU,SAAAC,GAAK,OAAIC,QAAQC,IAAR,WAAuBF,EAAMG,OAAOC,UAAYnB,QAAQ,cAEhH,iBAAQ,CACN,GAAM,0BADR,0BAGA,YAAC,IAAD,CAAYE,WAAY,EAAGC,OAAQ,4dAAmeC,SAAO,GAC3gBL,QACAH,kBACAS,eACAC,UACAC,aACAC,YAN2gB,gBAO3gBZ,IAP2gB,EAQ3gBH,eAR2gB,GAS1gBO,QAAQ,eACZ,WAAM,MACiCoB,YAAe,GAA1CC,EADN,KACiBC,EADjB,KAOD,OAAO,mBAAKC,MAAO,CACjBC,QAAS,OACTC,WAAY,SACZC,IAAK,SAEP,YAAC,IAAD,CAAQC,QATkB,WACxBL,GAAcD,IAQoBrB,QAAQ,UAA5C,mBACA,YAAC,IAAD,CAAUS,MAAM,WAAWC,KAAK,YAAYkB,MAAOP,EAAWP,SAAU,kBAAMQ,GAAcD,IAAYrB,QAAQ,iBAIpH,iBAAQ,CACN,GAAM,OADR,OAGA,YAAC,IAAD,CAAO6B,GAAItB,IAAUP,QAAQ,gB,oNAKjCH,EAAWiC,gBAAiB","file":"component---src-components-checkbox-checkbox-mdx-3bcc84394df3be7fb7ce.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/ventura/ventura/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { Checkbox } from '../../index.ts';\nimport { Button } from '../..';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"checkbox\"\n    }}>{`Checkbox`}</h1>\n    <p>{`A checkbox can be used enable an optional setting or feature.`}</p>\n    <h2 {...{\n      \"id\": \"best-practices\"\n    }}>{`Best practices`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Checkboxes should be wrapped in a `}<a parentName=\"li\" {...{\n          \"href\": \"/ventura/form-field\"\n        }}>{`FormField`}</a>{` or should be preceded by another component serving as a label`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <h3 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h3>\n    <Playground __position={0} __code={'<Checkbox label=\\\"Enable me\\\" name=\\\"enabled\\\" />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Checkbox,\n      Button,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Checkbox label=\"Enable me\" name=\"enabled\" mdxType=\"Checkbox\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"checked-state\"\n    }}>{`Checked state`}</h3>\n    <Playground __position={1} __code={'<Checkbox label=\\\"Disable me\\\" name=\\\"enabled-2\\\" defaultValue={true} />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Checkbox,\n      Button,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Checkbox label=\"Disable me\" name=\"enabled-2\" defaultValue={true} mdxType=\"Checkbox\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"checkbox-with-description\"\n    }}>{`Checkbox with description`}</h3>\n    <Playground __position={2} __code={'<Checkbox\\n  label=\\\"Enable me\\\"\\n  name=\\\"enabled-3\\\"\\n  description=\\\"This feature can be enabled\\\"\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Checkbox,\n      Button,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Checkbox label=\"Enable me\" name=\"enabled-3\" description=\"This feature can be enabled\" mdxType=\"Checkbox\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"disabled-checkbox\"\n    }}>{`Disabled checkbox`}</h3>\n    <Playground __position={3} __code={'<Checkbox label=\\\"You can\\'t enable me\\\" name=\\\"enabled-4\\\" isDisabled />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Checkbox,\n      Button,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Checkbox label=\"You can't enable me\" name=\"enabled-4\" isDisabled mdxType=\"Checkbox\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"listening-for-changes\"\n    }}>{`Listening for changes`}</h3>\n    <Playground __position={4} __code={'<Checkbox\\n  label=\\\"Log\\\"\\n  name=\\\"enabled-5\\\"\\n  onChange={event => console.log(`LOGGER: ${event.target.checked}`)}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Checkbox,\n      Button,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Checkbox label=\"Log\" name=\"enabled-5\" onChange={event => console.log(`LOGGER: ${event.target.checked}`)} mdxType=\"Checkbox\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"updating-initial-state\"\n    }}>{`Updating initial state`}</h3>\n    <Playground __position={5} __code={'() => {\\n  const [isChecked, setIsChecked] = React.useState(false)\\n  const handleToggleClick = () => {\\n    setIsChecked(!isChecked)\\n  }\\n  return (\\n    <div style={{ display: \\'flex\\', alignItems: \\'center\\', gap: \\'20px\\' }}>\\n      <Button onClick={handleToggleClick}>Toggle checkbox</Button>\\n      <Checkbox\\n        label=\\\"Checkbox\\\"\\n        name=\\\"enabled-6\\\"\\n        value={isChecked}\\n        onChange={() => setIsChecked(!isChecked)}\\n      />\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Checkbox,\n      Button,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [isChecked, setIsChecked] = React.useState(false);\n\n        const handleToggleClick = () => {\n          setIsChecked(!isChecked);\n        };\n\n        return <div style={{\n          display: 'flex',\n          alignItems: 'center',\n          gap: '20px'\n        }}>\n        <Button onClick={handleToggleClick} mdxType=\"Button\">Toggle checkbox</Button>\n        <Checkbox label=\"Checkbox\" name=\"enabled-6\" value={isChecked} onChange={() => setIsChecked(!isChecked)} mdxType=\"Checkbox\" />\n      </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <Props of={Checkbox} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}